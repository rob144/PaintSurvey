{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"GetP",
				"GetPaints"
			],
			[
				"suf",
				"surface_type"
			],
			[
				"pain",
				"paint_keys"
			],
			[
				"initD",
				"initDecimalInputs"
			],
			[
				"prod",
				"prod_rate"
			],
			[
				"surface",
				"surface_type"
			],
			[
				"spec-item",
				"spec-item-title"
			],
			[
				"to",
				"toLowerCase"
			],
			[
				"SUR",
				"SURFACE_TYPES"
			],
			[
				"name",
				"propertyName"
			],
			[
				"uni",
				"uniqueValues"
			],
			[
				"surf",
				"surface_type"
			],
			[
				"font-s",
				"font-size"
			],
			[
				"backg",
				"background-image"
			],
			[
				"nav",
				"nav-home"
			],
			[
				"back",
				"background-image"
			],
			[
				"border-ra",
				"border-top-left-radius"
			],
			[
				"remo",
				"removeClass"
			],
			[
				"max",
				"max-width"
			],
			[
				"first",
				"firstItem"
			],
			[
				"drop",
				"dropdown-value"
			],
			[
				"dropdown",
				"dropdown-value"
			],
			[
				"general",
				"general-surface-qty"
			],
			[
				"fun",
				"function"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"ma",
				"max-width"
			],
			[
				"blur",
				"blurInputFocus"
			],
			[
				"bayb",
				"baybreast-group"
			],
			[
				"wall",
				"wall-adjust-simple"
			],
			[
				"ceiling-ad",
				"ceiling-adjust-simple"
			],
			[
				"bb",
				"bbDepth"
			],
			[
				"room",
				"roomHeight"
			],
			[
				"font",
				"font-size"
			],
			[
				"background",
				"background-color"
			],
			[
				"fon",
				"font-size"
			],
			[
				"i",
				"italic"
			],
			[
				"border-top",
				"border-top-right-radius"
			],
			[
				"round",
				"roundAndFix"
			],
			[
				"input",
				"input-group"
			],
			[
				"window",
				"windowHours"
			],
			[
				"default-rda",
				"default-radiator-height"
			],
			[
				"default-ra",
				"default-radiator-quantity"
			],
			[
				"default-w",
				"default-window-height"
			],
			[
				"default-window",
				"default-window-width"
			],
			[
				"default-door-",
				"default-door-quantity"
			],
			[
				"default-room",
				"default-room-length"
			],
			[
				"proje",
				"projects_json"
			],
			[
				"is",
				"is_default"
			],
			[
				"fu",
				"function"
			],
			[
				"json",
				"json_data"
			],
			[
				"curs",
				"cursorPosLeft"
			],
			[
				"newlin",
				"newLineIndex"
			],
			[
				"new",
				"newLineIndexes"
			],
			[
				"p",
				"padding"
			],
			[
				"door",
				"doorFrame"
			],
			[
				"radi",
				"radiatorSpace"
			],
			[
				"doo",
				"doorQty"
			],
			[
				"border-top-",
				"border-top-right-radius"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"table",
				"table-cell"
			],
			[
				"s",
				"s3_id"
			],
			[
				"sent",
				"sentence_ids"
			],
			[
				"sen",
				"sentence_ids"
			],
			[
				"ipgramm",
				"ipgrammar_client"
			],
			[
				"border-r",
				"border-radius"
			],
			[
				"backgr",
				"background-color"
			],
			[
				"negate",
				"negate_pos"
			],
			[
				"post",
				"postag"
			],
			[
				"pos_re",
				"postag_regexp"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import os\nimport webapp2\nimport jinja2\nfrom google.appengine.ext import ndb\nfrom datetime import datetime\nimport time\nimport json\n\nTEMPLATES_DIR = 'templates/'\n\nloader = jinja2.FileSystemLoader(os.path.dirname(__file__))\n\nJINJA_ENV = jinja2.Environment(\n    loader = loader,\n    extensions = ['jinja2.ext.autoescape'],\n    autoescape = True)\n\ndef include_file(filename):\n    return jinja2.Markup(loader.get_source(JINJA_ENV, TEMPLATES_DIR + filename)[0])\n\nJINJA_ENV.globals['include_file'] = include_file\n\ndef json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n\nclass ModelUtils(object):\n    def to_dict(self):\n        result = super(ModelUtils,self).to_dict()\n        result['key'] = self.key.urlsafe()\n        return result\n\nclass Project(ModelUtils, ndb.Model):\n    id = ndb.IntegerProperty()\n    username = ndb.StringProperty()\n    title = ndb.StringProperty()\n    rooms = ndb.KeyProperty(kind='Room', repeated=True)\n    date_created = ndb.DateTimeProperty(auto_now_add=True)\n\nclass Room(ModelUtils, ndb.Model):\n    room_length = ndb.FloatProperty()\n    room_width = ndb.FloatProperty()\n    room_height = ndb.FloatProperty()\n    door_quantity = ndb.IntegerProperty()\n    door_width = ndb.FloatProperty()\n    door_height = ndb.FloatProperty()\n    window_quantity = ndb.IntegerProperty()\n    window_width = ndb.FloatProperty()\n    window_height = ndb.FloatProperty()\n    radiator_quantity = ndb.IntegerProperty()\n    radiator_width = ndb.FloatProperty()\n    radiator_height = ndb.FloatProperty()\n    is_default = ndb.BooleanProperty()\n\nclass Paint(ModelUtils, ndb.Model):\n    name = ndb.StringProperty()\n    prod_rate = ndb.FloatProperty()\n    surface_type = ndb.StringProperty()\n    order = ndb.IntegerProperty()\n\ndef create_default_room():\n    return Room(\n        room_length = 5.0,\n        room_width = 5.0,\n        room_height = 2.5,\n        door_quantity = 1,\n        door_width = 0.9,\n        door_height = 2.0,\n        window_quantity = 1,\n        window_width = 1.5,\n        window_height = 1.0,\n        radiator_quantity = 1,\n        radiator_width = 1.5,\n        radiator_height = 0.7,\n        is_default = True\n    )\n\ndef init_data():\n    #ndb.delete_multi(Project.query().fetch(keys_only=True))\n    #ndb.delete_multi(Room.query().fetch(keys_only=True))\n    #ndb.delete_multi(Paint.query().fetch(keys_only=True))\n    \n    #Create project test data if not there already.\n    if(Project.query(Project.username == 'Test').count() < 3):\n        Project(username='Test', title='Test One', date_created=datetime.now()).put()\n        Project(username='Test', title='Test Two', date_created=datetime.now()).put()\n        Project(username='Test', title='Test Three', date_created=datetime.now()).put()\n\n    #Create room defaults if not there already.\n    if(Room.query(Room.is_default == True).count() <= 0):\n        default_room = create_default_room()\n        default_room.put()\n\n    paint_data = [\n        ['1 Vinyl Matt', 20, 'Ceilings', 1],\n        ['2 Vinyl Matt', 10, 'Ceilings', 2],\n        ['2 Eggshell', 9, 'Ceilings', 3],\n        ['Wallpaper', 4.5, 'Walls', 1],\n        ['2 Vinyl Matt', 10, 'Walls', 2],\n        ['2 Eggshell', 9, 'Walls', 3],\n        ['General surface', 4, 'Doors', 1],\n        ['Glazed med pane', 3.5, 'Doors', 2],\n        ['Glazed small pane', 2.5, 'Doors', 3],\n        ['100 Girth', 15, 'Door Frames', 1],\n        ['150 Girth', 12, 'Door Frames', 2],\n        ['300 Girth', 10, 'Door Frames', 3],\n        ['Large pane', 5, 'Windows', 1],\n        ['Med pane', 4, 'Windows', 1],\n        ['Small pane', 3, 'Windows', 2],\n        ['Panel', 4, 'Radiators', 1],\n        ['Column', 3, 'Radiators', 2],\n        ['100 Girth', 15, 'Skirtings', 1],\n        ['150 Girth', 12, 'Skirtings', 2],\n        ['300 Girth', 10, 'Skirtings', 3]\n    ]\n\n    for p in paint_data:\n        qry = Paint.query(\n            Paint.name == p[0],\n            Paint.prod_rate == p[1],\n            Paint.surface_type == p[2]\n        )\n        if(qry.count() <= 0):\n            Paint(name=p[0], prod_rate=p[1], surface_type=p[2], order=p[3]).put()\n\n    time.sleep(3)\n\nclass Home(webapp2.RequestHandler):\n    def get(self):\n        init_data()\n        self.response.write(\n        	JINJA_ENV.get_template(TEMPLATES_DIR + 'index.html').render({ \n	        	'default_room': Room.query(Room.is_default == True).fetch(1)[0],\n	        	'projects': Project.query().fetch(20),\n                'paints': json.dumps([p.to_dict() for p in Paint.query().order(Paint.order).fetch(200)],\n                 default=json_serial) \n        	}) \n        )\n\nclass GetPaints(webapp2.RequestHandler):\n    def get(self):\n        self.response.write(\n            json.dumps([p.to_dict() for p in Paint.query().order(Paint.order).fetch(200)])\n        )\n\nclass SaveSpec(webapp2.RequestHandler):\n    def post(self):\n        surface_type = self.request.POST.get('surface_type')\n        paints = json.loads(self.request.POST.get('paints'))\n        new_paints = []\n        paint_keys = []\n\n        #Do adds and updates\n        for obj in paints:\n            paint_keys.append(obj['key'])\n            if(obj['key'] != \"\"):\n                print('KEY:  '+obj['key'])\n                print('OBJ:  '+str(obj))\n                #Update existing paint\n                paint = ndb.Key(urlsafe=obj['key']).get()\n                paint.name = obj['name'];\n                paint.prod_rate = float(obj['prod_rate']);\n                paint.put()\n            else:\n                #Create new paint\n                Paint(name = obj['name'],\n                    surface_type = surface_type,\n                    prod_rate = float(obj['prod_rate']),\n                    order = Paint.query().order(-Paint.order).fetch(1)[0].order + 1\n                ).put()\n\n        #Do deletions\n        all_paints = Paint.query(Paint.surface_type == surface_type).fetch(200)\n        for p in all_paints:\n            if p.key.urlsafe() not in paint_keys:\n                p.key.delete()\n\n        self.response.write('DONE')\n        \nclass CreateProject(webapp2.RequestHandler):\n    def post(self):\n        project_title = self.request.get('projectTitle')\n        new_project = Project(id=3, username='Test', title=project_title, date_created=datetime.now())\n        new_project.put()\n        create_default_room().put()\n        time.sleep(1) #Allow time for project to save to datastore\n        self.response.write( json.dumps([p.to_dict() for p in Project.query().fetch(20)], default=json_serial) )\n\nclass GetProject(webapp2.RequestHandler):\n    def post(self):\n        project = ndb.Key(urlsafe=self.request.get('project_key')).get()\n        self.response.write(json.dumps(project.to_dict(), default=json_serial))\n\nclass SaveRoom(webapp2.RequestHandler):\n    def post(self):\n        room_data = self.request.get('room')\n        #TODO: find the room with the given key\n\napplication = webapp2.WSGIApplication([\n    ('/', Home),\n    ('/createproject', CreateProject),\n    ('/getproject', GetProject),\n    ('/saveroom', SaveRoom),\n    ('/savespec', SaveSpec),\n    ('/getpaints', GetPaints)\n], debug=True)\n",
			"file": "main.py",
			"file_size": 7144,
			"file_write_time": 130722743830000000,
			"settings":
			{
				"buffer_size": 7168,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/index.html",
			"settings":
			{
				"buffer_size": 48034,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "console.log('test');",
			"file": "static/subdir/test.js",
			"file_size": 20,
			"file_write_time": 130722070870000000,
			"settings":
			{
				"buffer_size": 20,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app.yaml",
			"settings":
			{
				"buffer_size": 251,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/rdunn/dev/paint-survey"
	],
	"file_history":
	[
		"/Users/rdunn/dev/paint-survey/static/main.js",
		"/Users/rdunn/dev/paint-survey/main.py",
		"/Users/rdunn/dev/paint-survey/static/main.css",
		"/Users/rdunn/dev/paint-survey/templates/index.html",
		"/Users/rdunn/dev/ks-website/templates/contact-msg.html",
		"/Users/rdunn/dev/ks-website/main.py",
		"/Users/rdunn/dev/ks-website/templates/index.html",
		"/Users/rdunn/dev/ks-website/static/main.css",
		"/Users/rdunn/dev/ks-website/static/circle.svg",
		"/Users/rdunn/dev/ks-website/.gitigore",
		"/Users/rdunn/dev/paint-survey/static/plus.svg",
		"/Users/rdunn/dev/ks-website/static/orbit.svg",
		"/Users/rdunn/dev/pydraw/main.py",
		"/Users/rdunn/dev/svg/circle.svg",
		"/Users/rdunn/dev/paint-survey/README.md",
		"/Users/rdunn/dev/paint-survey/templates/page-room.html",
		"/Users/rdunn/dev/paint-survey/templates/page-room-defaults.html",
		"/Users/rdunn/dev/paint-survey/templates/page-prod-rates.html",
		"/Users/rdunn/dev/paint-survey/index.html",
		"/Users/rdunn/dev/paint-survey/page-room.html",
		"/Users/rdunn/dev/smart-writer/war/site.css",
		"/Users/rdunn/dev/smart-writer/war/site.js",
		"/Users/rdunn/dev/smart-writer/war/index.jsp",
		"/Users/rdunn/dev/paint-survey/page-projects.html",
		"/Users/rdunn/dev/paint-survey/page-room-defaults.html",
		"/Users/rdunn/dev/paint-survey/site.css",
		"/Users/rdunn/dev/smart-writer/src/com/ks/smartwriter/MainServlet.java",
		"/Users/rdunn/dev/smart-writer/build.xml",
		"/Users/rdunn/dev/paint-survey/page-prod-rates.html",
		"/Users/rdunn/dev/paint-survey/ls",
		"/Users/rdunn/dev/paint-survey/page-home.html",
		"/Users/rdunn/dev/paint-survey/page-l2.html",
		"/Users/rdunn/dev/paint-survey/page-l1.html",
		"/Users/rdunn/dev/paint-survey/page-r2.html",
		"/Users/rdunn/dev/paint-survey/page-r1.html",
		"/Users/rdunn/dev/paint-survey/test.html",
		"/Users/rdunn/dev/paint-survey/page1.html",
		"/Users/rdunn/dev/paint-survey/static/swipe1.html",
		"/Users/rdunn/dev/paint-survey/file.txt",
		"/Users/rdunn/dev/grammar-webservice/createdb.sql",
		"/Users/rdunn/dev/grammar-webservice/grammardb.py",
		"/Users/rdunn/dev/grammar-webservice/webservice.py",
		"/Users/rdunn/dev/grammar-webservice/wsclient.py",
		"/Users/rdunn/dev/grammar-webservice/unittests.py",
		"/Users/rdunn/dev/paint-survey/main.html",
		"/Users/rdunn/Downloads/rdkey1.pem",
		"/Users/rdunn/dev/paint-survey/main.css",
		"/Users/rdunn/dev/htmlintro/test.html",
		"/Users/rdunn/dev/jiraapi/test.html",
		"/Users/rdunn/jira/tii-18590/full/getreports.py",
		"/Users/rdunn/jira/tii-18590/get_reports.py",
		"/Users/rdunn/dev/SET/LanguageTool/grammar-webapp/src/main/webapp/WEB-INF/web.xml",
		"/Users/rdunn/Downloads/pattern-2.6/pattern/text/__init__.py",
		"/Users/rdunn/Downloads/pattern-2.6/pattern/text/en/__main__.py",
		"/Users/rdunn/Downloads/pattern-2.6/pattern/text/en/__init__.py",
		"/Users/rdunn/Downloads/elwiktionary-latest-pages-articles.xml",
		"/Users/rdunn/dev/JIRA/tii-17633.sql",
		"/Users/rdunn/Desktop/product_names.txt",
		"/Users/rdunn/Desktop/m_api_product.csv",
		"/Users/rdunn/dev/languagetool/languagetool-core/src/main/java/org/languagetool/language/LanguageBuilder.java",
		"/Users/rdunn/dev/languagetool/languagetool-core/src/main/java/org/languagetool/rules/patterns/PatternRuleLoader.java",
		"/Users/rdunn/dev/languagetool/languagetool-language-modules/en/pom.xml",
		"/Users/rdunn/jira/ints-8767/logs/39_cleanup_20140619131221.log",
		"/Users/rdunn/jira/ints-8767/rollback/rollback_template.sql",
		"/Users/rdunn/dev/languagetool/languagetool-language-modules/de/src/main/resources/org/languagetool/rules/de/grammar.xml",
		"/Users/rdunn/dev/languagetool/languagetool-core/src/main/resources/org/languagetool/rules/false-friends.xml",
		"/Users/rdunn/dev1/langtool/myrules.xml",
		"/Users/rdunn/dev1/langtool/langtoolapp/org/languagetool/rules/en/grammar.xml",
		"/Users/rdunn/dev1/tii/trunk/global/lib/lib_uct.pm",
		"/Users/rdunn/dev1/langtool/langtool.html",
		"/Users/rdunn/Downloads/english.dict",
		"/Users/rdunn/dev1/JIRA/middlesex_1.csv",
		"/Users/rdunn/dev1/pyRequests.py",
		"/Users/rdunn/dev1/output.txt",
		"/dev1/seu-master/src/webservices/bulkDownloadClient.cc"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>,/Users/rdunn/dev/languagetool",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"query",
			"each",
			"elem",
			"btn-remove-row",
			"initAddInputBlockButtons",
			"addInputBlock",
			".btn-add",
			"addInputBlock",
			"blur",
			"escape",
			"order",
			"page-left-3",
			"form-production-rates",
			"\"menuitem\"",
			"\"presentation\"",
			"general-surface-prod-rate",
			"form-row",
			"toggle",
			"baybreast-width",
			"intro",
			"ks-logo",
			"ks-log",
			"intro",
			"about",
			"section1",
			"relative",
			"about",
			"tracker",
			"85",
			"lab",
			"type",
			"alert",
			"value='0'",
			"value=",
			"required ",
			"hey",
			"blurDecimal",
			"addInputBlock",
			"addInputRow",
			"btn",
			"toggleDropDown",
			"dropdown-value",
			"selectDropDownItem",
			"input-row",
			".input-row",
			"input-row",
			"selectDropDownItem",
			"general-surface-group",
			"general-surface-prod-rate",
			"console",
			"float:right;",
			"general-surface",
			"newRow",
			"page",
			"block",
			"input-group",
			"back",
			"rmHeight",
			"rmWidth",
			"rmLength",
			"roomLength",
			"btnCalculate",
			"formRow",
			"numbersOnly",
			".toFixed(2)",
			"'windowHeight'",
			"'windowWidth'",
			"'windowQty'",
			"'doorHeight'",
			"'doorWidth'",
			"'doorQty'",
			"'roomLength'",
			"'roomHeight'",
			"'roomWidth'",
			"owl-example",
			"populateRoomDefaults",
			"template",
			"get_projects_as_json",
			" db",
			"get_projects_as_json",
			"projects",
			"appTitle",
			"overflow-x",
			"top",
			"elemWidth",
			"devTools",
			"findPrevLineBreakPos",
			"log",
			"setCursorPostion",
			"getContentBeforeCursor",
			"cursorAnimation",
			"getCursorPos",
			"removeNewlineIndex",
			"calcNewCursorPos",
			"findPrevLineBreakPos",
			"isWrap",
			"addNewline",
			"newLineIndexes",
			"isNewlineIndex",
			"addNewLineIndex",
			"findPrevLineBreakPos",
			"addNewLineIndex",
			"newLineIndexes",
			"printArrChars",
			"i =",
			"removeNewlineIndex",
			"removeCharFromEditor",
			"docMouseMove",
			"f ",
			".first()",
			"font",
			"14",
			"font-size",
			"formControl",
			"input-group-addon addon-label",
			"size='20'",
			"getRules",
			"loader",
			"addExternalRuleFile",
			"sub Form",
			"FORM",
			"MY Custom",
			"MY",
			"NN:U",
			"category",
			"zero",
			"sub include",
			"t_submit_js.inc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"form-specification",
			"'menuitem'",
			"'presentation'",
			"section-home",
			"",
			"newBlock",
			"input-pill",
			"roomHeight",
			"roomWidth",
			"roomLength",
			"btn-calculate",
			"form-row",
			"decimal",
			"",
			"'window-height'",
			"'window-width'",
			"'window-qty'",
			"'door-height'",
			"'door-width'",
			"'door-qty'",
			"'room-length'",
			"'room-height'",
			"'room-width'",
			"",
			"form-control",
			"control-label",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7168,
						"regions":
						{
						},
						"selection":
						[
							[
								5063,
								5063
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2034.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "templates/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48034,
						"regions":
						{
						},
						"selection":
						[
							[
								42460,
								42460
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12069.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "static/subdir/test.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20,
						"regions":
						{
						},
						"selection":
						[
							[
								20,
								20
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 251,
						"regions":
						{
						},
						"selection":
						[
							[
								115,
								115
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "paint-survey.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bulkdownload",
				"src/webservices/bulkDownloadClient.cc"
			],
			[
				"bulkdownloadserver.cc",
				"src/webservices/bulkDownloadServer.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 223.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
